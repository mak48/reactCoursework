import React, { useEffect, useState } from "react";
import { makeStyles } from "@mui/styles";
import {
  AppBar,
  Toolbar,
  Typography,
  Button,
  Drawer,
  List,
  ListItem,
  ListItemText,
  Card,
  CardContent,
} from "@mui/material";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import {
  ListItemIcon,
  Checkbox,
  Collapse,
  ListItemButton,
} from "@mui/material";
import { ExpandLess, ExpandMore } from "@mui/icons-material";
import axios from "axios";
import SortOptions from "./SortOptions";

const theme = createTheme({
  zIndex: {
    drawer: 1000,
  },
  spacing: 4,
  drawer: {
    width: 250,
  },
});

const useStyles = makeStyles((theme) => ({
  root: {
    display: "flex",
  },
  appBar: {
    zIndex: theme.zIndex.drawer + 300,
  },
  title: {
    flexGrow: 1,
  },
  drawer: {
    width: theme.drawer.width,
    flexShrink: 0,
  },
  cardImage: {
    maxWidth: "100%",
    height: "auto",
    maxHeight: "200px",
    marginBottom: theme.spacing(1),
    objectFit: "cover",
    objectPosition: "center",
  },
  drawerPaper: {
    width: theme.drawer.width,
    "& .MuiListItemText-root": {
      fontSize: "0.1rem",
    },
    "& .MuiListItem-root": {
      paddingTop: theme.spacing(0.5),
      paddingBottom: theme.spacing(0.5),
    },
  },
  content: {
    flexGrow: 1,
    padding: theme.spacing(3),
  },
  cardContainer: {
    display: "grid",
    gridTemplateColumns: "repeat(4, 300px)",
    gap: theme.spacing(5),
    marginTop: theme.spacing(2),
  },
  card: {
    display: "flex",
    flexDirection: "column",
    minHeight: "200px",
  },
  cardMedia: {
    height: 150,
    objectFit: "cover",
  },
  sidebarTitle: {
    padding: theme.spacing(2, 0, 1),
    fontWeight: "bold",
  },
}));

const DashboardPage = () => {
  const classes = useStyles();

  const navLinks = [
    { text: "–ì–ª–∞–≤–Ω–∞—è", to: "/" },
    { text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", to: "/review" },
    { text: "–†–µ–π—Ç–∏–Ω–≥", to: "/rating" },
    { text: "–ü–æ–∏—Å–∫", to: "/search" },
  ];

  const filters = {
    sort: ["–°–ª–æ–∂–Ω–æ—Å—Ç—å", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å", "–í—Ä–µ–º—è–∑–∞—Ç—Ä–∞—Ç–Ω–æ—Å—Ç—å", "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥"],
    categories: [
      "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
      "–ë–∏–∑–Ω–µ—Å –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
      "–ï—Å—Ç–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
      "–ò—Å—Ç–æ—Ä–∏—è –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è",
      "–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è, —Ä–µ–ª–∏–≥–∏–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∞–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥–∏—è",
      "–ú–µ–¥–∏–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ soft skills",
      "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
      "–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≥—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
      "–ü—Ä–∞–≤–æ –∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å",
      "–†–µ–≥–∏–æ–Ω–æ–≤–µ–¥–µ–Ω–∏–µ",
      "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—É–∫–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞",
      "–§–∏–ª–æ–ª–æ–≥–∏—è –∏ —è–∑—ã–∫–æ–∑–Ω–∞–Ω–∏–µ",
      "–≠–∫–æ–Ω–æ–º–∏–∫–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    ],
    categoryNameToId: {
      "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": 1,
      "–ë–∏–∑–Ω–µ—Å –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç": 2,
      "–ï—Å—Ç–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": 3,
      "–ò—Å—Ç–æ—Ä–∏—è –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": 4,
      "–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è, —Ä–µ–ª–∏–≥–∏–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –∞–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥–∏—è": 5,
      "–ú–µ–¥–∏–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ soft skills": 6,
      "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": 7,
      "–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≥—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": 8,
      "–ü—Ä–∞–≤–æ –∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å": 9,
      –†–µ–≥–∏–æ–Ω–æ–≤–µ–¥–µ–Ω–∏–µ: 10,
      "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—É–∫–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞": 11,
      "–§–∏–ª–æ–ª–æ–≥–∏—è –∏ —è–∑—ã–∫–æ–∑–Ω–∞–Ω–∏–µ": 12,
      "–≠–∫–æ–Ω–æ–º–∏–∫–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": 13,
    },
  };
  const [cards, setCards] = useState([]);

  useEffect(() => {
    axios
      .get("http://localhost:8080/api/minors")
      .then((response) => {
        const fetchedCards = response.data.map((minor) => ({
          id: minor.id,
          title: minor.title,
          description: "minor.description",
          image: minor.link,
          stars: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        }));
        setCards(fetchedCards);
      })
      .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–π–Ω–æ—Ä–∞—Ö:", error);
      });
  }, []);

  const [openSort, setOpenSort] = useState(false);
  const [openCategories, setOpenCategories] = useState(false);
  const [checkedSortOptions, setCheckedSortOptions] = useState(null);
  const [checkedCategories, setCheckedCategories] = useState([]);
  const [checkedDates, setCheckedDates] = useState([]);
  const [selectedSortOption, setSelectedSortOption] = useState("");

  const handleCategoryToggle = (value) => () => {
    const currentIndex = checkedCategories.indexOf(value);
    const newChecked = [...checkedCategories];

    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }

    setCheckedCategories(newChecked);
    //
    console.log("Selected Categories:", newChecked);
  };
  const handleSortChange = (event) => {
    setSelectedSortOption(event.target.value);
  };

  const handleSortToggle = (index) => () => {
    setCheckedSortOptions(index === checkedSortOptions ? null : index);
  };

  const handleSortButtonClick = async () => {
    const categoryIds = checkedCategories.map((index) => {
      const categoryName = filters.categories[index];
      return getCategoryIdByName(categoryName);
    });

    const comparatorIndex = checkedSortOptions;
    const comparatorMap = {
      0: "DIFFICULTY_SORT",
      1: "INTEREST_SORT",
      2: "TIME_CONSUMPTION_SORT",
      3: "TOTAL_SORT",
    };

    const comparator = comparatorMap[comparatorIndex];

    if (categoryIds.length === 0 && !comparator) {
      return;
    }

    if (categoryIds.length === 0 && !comparator) {
      return;
    }
    const params = {};
    let url = "";
    if (categoryIds.length === 0) {
      url = "http://localhost:8080/api/minors_sort";
      params.comparator = comparator;
    } else if (!comparator) {
      url = "http://localhost:8080/api/categories";
      params.categoryIds = categoryIds.join(",");
    } else {
      url = "http://localhost:8080/api/categories_sort";
      params.categoryIds = categoryIds.join(",");
      params.comparator = comparator;
    }

    try {
      const response = await axios.get(url, {
        params: params,
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.status === 200) {
        const fetchedCards = response.data.map((minor) => ({
          id: minor.id,
          title: minor.title,
          image: minor.link,
          stars: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        }));
        setCards(fetchedCards);
        console.log("–ú–∞–π–Ω–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:", response.data);
      } else {
        console.error(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–π–Ω–æ—Ä—ã. Status:",
          response.status
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º–∞–π–Ω–æ—Ä–æ–≤:", error);
    }
  };

  const getCategoryIdByName = (categoryName) => {
    return filters.categoryNameToId[categoryName] || 0;
  };

  return (
    <div className={classes.root}>
      <AppBar position="fixed" className={classes.appBar}>
        <Toolbar>
          <Typography variant="h6" className={classes.title}>
            –í—Å–µ –º–∞–π–Ω–æ—Ä—ã
          </Typography>
          {navLinks.map((link, index) => (
            <Button color="inherit" key={index} href={link.to}>
              {link.text}
            </Button>
          ))}
          <Button color="inherit">üë§</Button>
        </Toolbar>
      </AppBar>
      <Drawer
        className={classes.drawer}
        variant="permanent"
        classes={{
          paper: classes.drawerPaper,
        }}
      >
        <Toolbar />
        <div className={classes.drawer}>
          <Typography variant="subtitle1" className={classes.sidebarTitle}>
            <ListItemButton onClick={() => setOpenSort(!openSort)}>
              <ListItemText primary="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å" />
              {openSort ? <ExpandLess /> : <ExpandMore />}
            </ListItemButton>
          </Typography>
          <Collapse in={openSort} timeout="auto" unmountOnExit>
            <SortOptions
              filters={filters}
              checkedSortOptions={checkedSortOptions}
              handleSortToggle={handleSortToggle}
            />
          </Collapse>

          <Typography variant="subtitle1" className={classes.sidebarTitle}>
            <ListItemButton onClick={() => setOpenCategories(!openCategories)}>
              <ListItemText primary="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" />
              {openCategories ? <ExpandLess /> : <ExpandMore />}
            </ListItemButton>
          </Typography>
          <Collapse in={openCategories} timeout="auto" unmountOnExit>
            <List component="div" disablePadding>
              {filters.categories.map((text, index) => (
                <ListItem
                  button
                  key={text}
                  sx={{ pl: 4 }}
                  onClick={handleCategoryToggle(index)}
                >
                  <ListItemIcon>
                    <Checkbox
                      edge="start"
                      checked={checkedCategories.indexOf(index) !== -1}
                      tabIndex={-1}
                      disableRipple
                    />
                  </ListItemIcon>
                  <ListItemText primary={text} />
                </ListItem>
              ))}
            </List>
          </Collapse>

          <Button
            variant="contained"
            color="primary"
            onClick={handleSortButtonClick}
          >
            –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
        </div>
      </Drawer>
      <main className={classes.content}>
        <Toolbar />
        <div className={classes.cardContainer}>
          {cards.map((card) => (
            <Card key={card.id} className={classes.card}>
              <CardContent>
                <img
                  src={card.image}
                  alt={card.title}
                  className={classes.cardImage}
                />
                <Typography variant="h6" component="h2">
                  {card.stars}
                </Typography>
                <Typography variant="h6" component="h2">
                  {card.title}
                </Typography>
              </CardContent>
            </Card>
          ))}
        </div>
      </main>
    </div>
  );
};

function App() {
  return (
    <ThemeProvider theme={theme}>
      <DashboardPage />
    </ThemeProvider>
  );
}
export default App;
